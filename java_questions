Should speak:
- OOP
- Immutable class 
- Design pattern: singleton, factory, builder, ioc
- Collections
- hash/equals
- syncronized -> code
- 


What is Java for you? (platform, language, environment) What do you like/hate in it?
What is OOP? What other paradigm do you know?
Latest features of Java
Favorite blog/book/etc
Please give me some examples for anti-pattern!
What are design patterns, what are they good for? (IoC, singleton, factory, builder, pool)
What are anti-patterns? Example
What is clean code?
How many threads are running in a Java program minimum? What is ThreadPool?
What  can an interface contain?
Tools (CI, IDE, builder, issue tracker, etc)
TDD - why do we need tests? Manager situation - it is not needed
Agile: meetings, roles
What is refactoring?
Code quality measurement
Collections
Immutable class
How do you debug? 
Testing types. Who does what, when, how.
What do you expect from a business specification?
How do you introduce new tools/3rd party libraries/new versions?
What is CI, what does it mean?
Describe a good agile developer team
Spring
Modules
Basic function
Why (not) JEE?
Hibernate/JPA/eclipseLink
What does it mean an object is stateless or stateful?
Hashcode/equals 
Override, overload
Try-catch-finally: resource close in java8


Warming up questions:
What are the OOP characteristics? 
Current java version 
Main features in Java 8/9
Override, overload
What can be in an interface
Refactoring
What is transient
What is gc?

Ugly questions
Does it work? : 
    Integer i1 = new Integer(12);
    Integer i2 = new Integer(12);

    Integer i11 = Integer.valueOf(12);
    Integer i21 = Integer.valueOf(12);

    Integer i12 = Integer.valueOf(152);
    Integer i22 = Integer.valueOf(152);

    System.out.println(i1 == i2);
    System.out.println(i11 == i21);
    System.out.println(i12 == i22);
 

Basic coding questions:

  public static void main(String[] args) {
    String str = "test";
    List<String> lst = new ArrayList<>();

    System.out.println(str);
    System.out.println(lst.size());

    testMethod(str, lst);

    System.out.println(str);
    System.out.println(lst.size());

    testMethod2(str, lst);

    System.out.println(str);
    System.out.println(lst.size());
  }

  static void testMethod(String str, List<String> lst) {
    str = str + "2";
    lst.add("test");
  }

  static void testMethod2(String str, List<String> lst) {
    str = "2";
    lst = new ArrayList<>();
    lst.add("test");
    lst.add("test2");
  }
=======================================

public class PC {

  public ArrayList<String> d = new ArrayList<>();

  /**
   * Add data
   * @param str
   */
  private void addData(String str) {
    try {
      d.add(str);
    } catch (Exception ex) {
      ;
    }
  }

  /**
   * Remove the string if it is sensitive word
   *
   * @param str
   */
  void removeIfSensitive(String str) {
    if (str.equals("test")) {
      d.remove("test");
    }
    if (str.equals("test2")) {
      d.remove("test2");
    }
  }

  public ArrayList<String> getD() {
    return d;
  }
}
===============================

Make the class immutable:

String name;
String age;
List<String> favoriteBooks;

===============================
Overloading, overriding

class A {
    protected Object myMethod(Integer i) {
        return "" + i;
    }
}

class B extends A {

    //override

    //overload
}

=================================
Default methods

    default int method1() {
        return 1;
    }
}

interface I2 {
    default int method1() {
        return 2;
    }
}

class C implements I1, I2 {

}
